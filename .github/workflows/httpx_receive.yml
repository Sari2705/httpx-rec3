name: Tertiary - Receive and Process httpx Chunks

on:
  workflow_dispatch:
    inputs:
      # --- Inputs from the Primary Account's Trigger ---
      primary_github_server_url:
        description: 'The server URL of the primary GitHub instance (e.g., https://github.com)'
        required: true
      primary_repo_owner:
        description: 'The owner of the primary repository that triggered this workflow.'
        required: true
      primary_repo_name:
        description: 'The name of the primary repository.'
        required: true
      primary_run_id:
        description: 'The run_id of the primary workflow to download artifacts from.'
        required: true
      chunk_package_artifact_name:
        description: 'The name of the artifact containing all chunks and resolvers.'
        required: true
      # This input is specifically for the Tertiary account's workload
      tertiary_matrix_json:
        description: 'The JSON string representing the matrix of chunks this account should process.'
        required: true

permissions:
  actions: read      # To download artifacts from the primary repository's workflow run
  contents: write    # To upload its own result artifacts

jobs:
  resolve_tertiary_account_chunks:
    name: Resolve Tertiary Account Chunks (httpx + dsieve)
    runs-on: ubuntu-latest
    container:
      # Use the exact same container for consistency with other accounts
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      # The matrix is dynamically built from the specific 'tertiary' payload sent by the primary account
      matrix:
        pair: ${{ fromJson(github.event.inputs.tertiary_matrix_json) }}
    steps:
      - name: Checkout repository (for results structure)
        uses: actions/checkout@v3

      - name: Add Startup Delay to Allow for Runner Allocation
        run: |
          echo "This runner will wait for 60 seconds to allow other jobs in the matrix to be allocated."
          sleep 60
          echo "Delay finished. Beginning artifact download."
          
      - name: Download Full Chunks Package from Primary Account
        env:
          GH_TOKEN_PRIMARY_ACCOUNT_READ: ${{ secrets.PAT_FOR_PRIMARY_ACCOUNT_ARTIFACTS_READ }}
          PRIMARY_REPO_OWNER: ${{ github.event.inputs.primary_repo_owner }}
          PRIMARY_REPO_NAME: ${{ github.event.inputs.primary_repo_name }}
          PRIMARY_RUN_ID: ${{ github.event.inputs.primary_run_id }}
          ARTIFACT_NAME_FROM_PRIMARY: ${{ github.event.inputs.chunk_package_artifact_name }}
        shell: bash
        run: |
          echo "TERTIARY WORKER: Downloading artifact '$ARTIFACT_NAME_FROM_PRIMARY' from $PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME, run ID $PRIMARY_RUN_ID"
          if ! command -v gh &> /dev/null; then
            echo "INFO: gh CLI not found. Installing..."
            (curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && sudo apt-get update && sudo apt-get install gh -y)
          fi

          echo "$GH_TOKEN_PRIMARY_ACCOUNT_READ" | gh auth login --with-token
          FULL_PRIMARY_REPO="$PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME"
          gh run download "$PRIMARY_RUN_ID" -R "$FULL_PRIMARY_REPO" -n "$ARTIFACT_NAME_FROM_PRIMARY" --dir .

          PACKAGE_FILENAME="$ARTIFACT_NAME_FROM_PRIMARY.tar.gz"
          if [ ! -f "$PACKAGE_FILENAME" ]; then
            echo "ERROR: Failed to download '$PACKAGE_FILENAME'."
            exit 1
          fi
          echo "Downloaded '$PACKAGE_FILENAME'."
          
      - name: Extract Chunks for Tertiary
        shell: bash
        run: |
          PACKAGE_FILENAME="${{ github.event.inputs.chunk_package_artifact_name }}.tar.gz"
          echo "Extracting the main tarball: $PACKAGE_FILENAME..."
          tar -xzvf "$PACKAGE_FILENAME"
          if [ ! -d "chunks" ]; then
             echo "ERROR: 'chunks/' directory not found after extraction!"
             exit 1
          fi
          echo "Extraction complete. Listing contents of 'chunks/':"
          ls -R chunks/

      - name: Set up Go & install httpx + dsieve
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Install httpx and dsieve
        run: |
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install -v github.com/trickest/dsieve@latest

      - name: Run httpx + pre-dsieve on subdomains + final filtering
        # This step is an exact copy of the logic from the secondary account's workflow
        # It uses the matrix context, which is now populated with the tertiary chunks
        shell: bash
        run: |
          DOMAIN=${{ matrix.pair.domain }}
          CHUNK_FILE_PATH=${{ matrix.pair.chunk }}
          echo "Processing domain '$DOMAIN' with chunk '$CHUNK_FILE_PATH'..."

          if [ ! -f "$CHUNK_FILE_PATH" ]; then
            echo "ERROR: Chunk file '$CHUNK_FILE_PATH' not found!"
            exit 1
          fi

          echo "-> Generating parent_domains.txt from raw subdomains..."
          dsieve -if "$CHUNK_FILE_PATH" -f 2 | sort -u > parent_domains.txt

          HTTPX_OUT="httpx_output.txt"
          echo "-> Running httpx against '$CHUNK_FILE_PATH'..."
          httpx \
            -l "$CHUNK_FILE_PATH" \
            -threads 100 \
            -silent \
            -no-color \
            -o "$HTTPX_OUT"

          if [ ! -s "$HTTPX_OUT" ]; then
            echo "No live URLs found in this chunk. Exiting early."
            mkdir -p results
            exit 0
          fi
          
          OUTPUT_ROOT="results"
          mkdir -p "$OUTPUT_ROOT"

          while read -r parent; do
            mkdir -p "$OUTPUT_ROOT/$parent"
            awk -v b="$parent" -F'/' '
              {
                host = $3
                sub(/:.*/, "", host)
                if (host == b || host ~ ("\\." b "$")) {
                  print $0
                }
              }
            ' "$HTTPX_OUT" > "$OUTPUT_ROOT/$parent/httpx_result.txt"
          done < parent_domains.txt

          echo "-> Split complete for domain '$DOMAIN'."
          mkdir -p results # Ensure dir exists

      - name: Compute SAFE_CHUNK (no slashes)
        run: |
          SAFE_CHUNK="${{ matrix.pair.chunk }}"
          SAFE_CHUNK="$(echo "$SAFE_CHUNK" | tr '/' '_')"
          echo "SAFE_CHUNK=$SAFE_CHUNK" >> $GITHUB_ENV         
      
      - name: Upload Tertiary Account httpx+dsieve Results
        uses: actions/upload-artifact@v4
        with:
          # Name the artifact to clearly identify it as coming from the tertiary account
          name: tertiary_httpx_dsieve_${{ matrix.pair.domain }}_${{ env.SAFE_CHUNK }}
          path: results/
          retention-days: 1
